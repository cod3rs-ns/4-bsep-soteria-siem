{
  "swagger": "2.0",
  "info": {
    "description": "Soteria - take care of your logs.",
    "version": "0.0.1",
    "title": "Soteria API",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "email": "soteria@gmail.com"
    }
  },
  "host": "localhost:9091",
  "basePath": "/api",
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "tags": [
    {
      "name": "Projects",
      "description": "Everything about your Projects"
    },
    {
      "name": "logs",
      "description": "Access to your Logs"
    },
    {
      "name": "users",
      "description": "Operations about User"
    }
  ],
  "schemes": [
    "http"
  ],
  "paths": {
    "/projects": {
      "post": {
        "summary": "Create new project",
        "description": "This action creates new Project entity",
        "operationId": "createProject",
        "tags": [
          "Projects"
        ],
        "parameters": [
          {
            "name": "project",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateProjectRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Project created",
            "schema": {
              "$ref": "#/definitions/ProjectResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "X-Auth-Token": []
          }
        ]
      }
    },
    "/projects/{projectId}": {
      "get": {
        "summary": "Retrieve project",
        "description": "This action retrieves single project",
        "operationId": "retrieveProject",
        "tags": [
          "Projects"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "type": "integer",
            "format": "int64",
            "required": true,
            "default": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved project",
            "schema": {
              "$ref": "#/definitions/ProjectResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "X-Auth-Token": []
          }
        ]
      },
      "delete": {
        "summary": "Delete project",
        "description": "This action deletes project",
        "operationId": "deleteProject",
        "consumes": [],
        "produces": [],
        "tags": [
          "Projects"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "type": "integer",
            "format": "int64",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully removed project"
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/projects/owned": {
      "get": {
        "summary": "Retrieve own projects",
        "description": "Retrieve projects in which user has owner status",
        "operationId": "retrieveOwnProjects",
        "tags": [
          "Projects"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successfully retrieved projects",
            "schema": {
              "$ref": "#/definitions/ProjectCollectionResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "X-Auth-Token": {
      "type": "apiKey",
      "name": "X-Auth-Token",
      "in": "header"
    }
  },
  "definitions": {
    "ResponseMeta": {
      "title": "Response meta",
      "description": "Standard response meta data",
      "type": "object",
      "properties": {
        "created-at": {
          "type": "string",
          "format": "date-time",
          "description": "Time of entity creation in UTC (ISO-8601 format)",
          "example": "2017-05-30T17:57:40.797+02:00"
        },
        "updated-at": {
          "type": "string",
          "format": "date-time",
          "description": "Last time of entity updated in UTC (ISO-8601 format)",
          "example": "2017-05-30T17:57:40.797+02:00"
        },
        "created-by": {
          "type": "string",
          "description": "Name of the entity's author",
          "example": "Chandler Bing"
        },
        "updated-by": {
          "type": "string",
          "description": "Name of the last user that changed this entity",
          "example": "Joey Tribbiani"
        }
      },
      "required": [
        "created-at",
        "updated-at",
        "created-by",
        "updated-by"
      ]
    },
    "SimpleErrorMeta": {
      "title": "Simple error meta",
      "description": "Simple error meta response data",
      "properties": {
        "created-at": {
          "type": "string",
          "format": "date-time",
          "description": "Time of error occurrence in UTC (ISO-8601 format)",
          "example": "2017-05-30T17:57:40.797+02:00"
        }
      },
      "required": [
        "created-at"
      ]
    },
    "ErrorResponse": {
      "title": "Error response",
      "description": "Standard error response",
      "type": "object",
      "properties": {
        "meta": {
          "$ref": "#/definitions/SimpleErrorMeta"
        },
        "code": {
          "type": "string",
          "description": "Custom application error code",
          "example": "STA-1001"
        },
        "title": {
          "type": "string",
          "description": "Title of the occurred error",
          "example": "Something bad happened"
        },
        "detail": {
          "type": "string",
          "description": "Additional details describing occurred error",
          "example": "This error happened because of bad luck"
        }
      },
      "required": [
        "meta",
        "code",
        "title",
        "detail"
      ]
    },
    "CreateProjectRequest": {
      "title": "Create project request",
      "description": "Request to create new project",
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "projects"
              ],
              "description": "Represents entity type",
              "example": "projects"
            },
            "attributes": {
              "type": "object",
              "title": "Project Request Attributes",
              "description": "Project request attributes",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Project's name",
                  "example": "Super cool project"
                },
                "description": {
                  "type": "string",
                  "description": "Project's description",
                  "example": "This is some super cool project"
                }
              },
              "required": [
                "name"
              ]
            }
          },
          "required": [
            "type",
            "attributes"
          ]
        }
      },
      "required": [
        "data"
      ]
    },
    "Project": {
      "title": "Project",
      "description": "Data about project",
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "Project's unique identifier",
          "example": 1001
        },
        "type": {
          "type": "string",
          "description": "Type of the entity",
          "example": "projects"
        },
        "attributes": {
          "type": "object",
          "title": "Project Request Attributes",
          "description": "Project request attributes",
          "properties": {
            "name": {
              "type": "string",
              "description": "Project's name",
              "example": "Super cool project"
            },
            "description": {
              "type": "string",
              "description": "Project's description",
              "example": "This is some super cool project"
            }
          },
          "required": [
            "name"
          ]
        }
      },
      "required": [
        "id",
        "type",
        "attributes"
      ]
    },
    "ProjectResponse": {
      "title": "Project Response",
      "description": "Response containing data about Project entity",
      "type": "object",
      "properties": {
        "meta": {
          "$ref": "#/definitions/ResponseMeta"
        },
        "data": {
          "$ref": "#/definitions/Project"
        }
      },
      "required": [
        "meta",
        "data"
      ]
    },
    "ProjectCollectionResponse": {
      "title": "Project Collection Response",
      "description": "Collection of projects with additional meta data.",
      "type": "object",
      "properties": {
        "links": {
          "$ref": "#/definitions/PaginationLinks"
        },
        "meta": {
          "$ref": "#/definitions/PaginationMeta"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Project"
          }
        }
      },
      "required": [
        "links",
        "meta",
        "data"
      ]
    },
    "PaginationLinks": {
      "title": "Pagination Links",
      "description": "Additional links to rest of the data with same criteria",
      "type": "object",
      "properties": {
        "self": {
          "type": "string",
          "description": "Link to itself",
          "example": "http://soteria.com/api/projects?page[offset]=10&page[limit]=10"
        },
        "next": {
          "type": "string",
          "description": "Link to next element or group of elements",
          "example": "http://soteria.com/api/projects?page[offset]=20&page[limit]=10"
        },
        "prev": {
          "type": "string",
          "description": "Link to previous element or group of elements",
          "example": "http://soteria.com/api/projects?page[offset]=0&page[limit]=10"
        },
        "first": {
          "type": "string",
          "description": "Link to first element or group of elements",
          "example": "http://soteria.com/api/projects?page[offset]=0&page[limit]=10"
        },
        "last": {
          "type": "string",
          "description": "Link to last element or group of elements",
          "example": "http://soteria.com/api/projects?page[offset]=90&page[limit]=10"
        }
      },
      "required": [
        "self"
      ]
    },
    "PaginationMeta": {
      "title": "Pagination Meta",
      "description": "Additional info about entities in response",
      "type": "object",
      "properties": {
        "total-pages": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of pages",
          "example": 28
        },
        "total-items": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of items",
          "example": 999
        },
        "items-per-page": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of items per each page",
          "example": 10
        }
      },
      "required": [
        "total-items"
      ]
    }
  }
}